package logic

import (
	"fmt"
	"math/rand"
	"time"
)

// Функция для генерации номера карты
func GenerateCardNumber(prefix string, length int) string {
	// Устанавливаем начальное зерно для генератора случайных чисел
	// Это необходимо для того, чтобы каждый запуск программы генерировал разные случайные числа
	rand.Seed(time.Now().UnixNano())

	// Инициализация строки cardNumber, начиная с префикса
	var cardNumber string
	cardNumber = prefix

	// Генерация случайных цифр до достижения нужной длины (должна быть длина минус 1, т.к. последняя цифра - контрольная)
	// В цикле добавляются случайные цифры (от 0 до 9) в cardNumber
	for len(cardNumber) < length-1 {
		cardNumber += fmt.Sprintf("%d", rand.Intn(10)) // Добавляем случайное число от 0 до 9
	}

	// Алгоритм Луна для вычисления контрольной цифры:
	// Этот алгоритм проверяет и рассчитывает контрольную цифру для проверки корректности номера карты.
	var sum int           // Сумма, которая будет рассчитываться по алгоритму Луна.
	var shouldDouble bool // Флаг, определяющий, нужно ли удваивать цифру (через одну).

	// Проходим по цифрам с конца (начиная с последней добавленной цифры)
	for i := len(cardNumber) - 1; i >= 0; i-- {
		// Преобразуем символ цифры в целое число
		digit := int(cardNumber[i] - '0')

		// Если флаг shouldDouble установлен в true, удваиваем текущую цифру
		if shouldDouble {
			digit *= 2 // Удваиваем цифру
			if digit > 9 {
				digit -= 9 // Если результат больше 9, вычитаем 9 (аналогично преобразованию через сумму цифр)
			}
		}

		// Добавляем цифру (или обработанную удвоенную цифру) в общую сумму
		sum += digit

		// Меняем флаг shouldDouble для следующей итерации (через одну цифру)
		shouldDouble = !shouldDouble
	}

	// Рассчитываем контрольную цифру
	// Сначала находим остаток от деления суммы на 10 (это будет последняя цифра суммы)
	checksum := (10 - sum%10) % 10

	// Добавляем контрольную цифру в конец номера карты
	cardNumber += fmt.Sprintf("%d", checksum)

	// Возвращаем готовый номер карты
	return cardNumber
}
